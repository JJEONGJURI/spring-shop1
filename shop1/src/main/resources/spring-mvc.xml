<?xml version="1.0" encoding="UTF-8" ?>
<!-- /shop1/src/main/resources/spring-mvc.xml 
js, css, html : 웹에서 기본제공되는 파일은 spring 에서 제외시킴.-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd
 http://www.springframework.org/schema/context
 http://www.springframework.org/schema/context/spring-context.xsd
 http://www.springframework.org/schema/aop
 http://www.springframework.org/schema/aop/spring-aop.xsd
 http://www.springframework.org/schema/mvc
 http://www.springframework.org/schema/mvc/spring-mvc.xsd
 http://www.springframework.org/schema/websocket
 http://www.springframework.org/schema/websocket/spring-websocket-4.1.xsd">
	<mvc:default-servlet-handler /> 
	<context:component-scan
		base-package="controller,logic,dao,aop,websocket" />
	<!-- 3개 패키지 중에 component 가 있으면 객체화 시켜 -->
	<!-- @Component, @Controller, @Service, @Repository => 객체화 -->
	<!-- mvc 관련 어노테이션 적용 -->
	<mvc:annotation-driven />
	<!-- AOP 관련 어노테이션 적용 -->
	<aop:aspectj-autoproxy /> 
	<!-- mvc(웹 환경) 관련 어노테이션 적용 할 수 있도록 해줘 -->	
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- viewResolver : view 선택자, view 결정자 -> jsp 페이지의 위치 지정 item/list : /WEB-INF/view/item/list.jsp 
			=> itemList 데이터 전달 -->
		<property name="viewClass">
			<value>org.springframework.web.servlet.view.JstlView</value>
		</property>
		<property name="prefix">
			<!-- spring에서는 jsp를 WEB-INF 밑에 넣어준다. -->
			<value>/WEB-INF/view/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
			<!-- 뒤에 .jsp 붙여줘라 -->
		</property>
	</bean>
	<!-- 파일 업로드 설정 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:maxUploadSize="104854600" p:maxInMemorySize="10485460" />
	<!-- 예외처리 설정 : 예외 발생시 처리를 위한 설정-->
	<bean id="exceptionHandler"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings"> <!-- 처리 가능한 예외 목록 -->
			<value>exception.CartEmptyException=exception
			exception.LoginException=exception</value> 
			
			<!--exception.CartEmptyException 예외가 발생 => /WEB-INF/view/exception.jsp 로 제어 이동 -->
		</property>
	</bean>
	<!-- message 처리 설정 : messages.properties : 기본
						  1.messages_ko_KR.properties : 지역코드 : ko_KR 
						  2.1번 파일이 없는 경우 messages.properties 호출
						  
	messages.properties 만들기 전에 messages.txt 파일 만들어야함 -->
						   	
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames"> <!-- basenames의 messages.properties를 가라? -->
			<list>
				<value>messages</value>
			</list>
		</property>
	</bean>
	<!-- websocket 관련 설정 -->
	<websocket:handlers>
		<websocket:mapping handler="echoHandler" path="/chatting" />
	</websocket:handlers>
	<!-- websocket 관련 설정 끝-->
	
	<!-- 인터셉터 설정 : 요청 url을 중심으로 실행 전 후에 처리 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/board/write"/>
			<mvc:mapping path="/board/update"/>
			<mvc:mapping path="/board/delete"/>
			<bean class="interceptor.BoardInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	<!-- 인터셉터 설정 끝-->
</beans>